#!/bin/bash

# ------------------------------------------------------------------
# "THE PIZZA-WARE LICENSE" (Revision 42):
# Peter Hofmann <pcode@uninformativ.de> wrote this file. As long as you
# retain this notice you can do whatever you want with this stuff. If
# we meet some day, and you think this stuff is worth it, you can buy
# me a pizza in return.
# ------------------------------------------------------------------


# --- Configure server.
servername="localhost"
serverport="70"
docroot=/srv/gopher

while getopts n:p:r: name; do
	case $name in
		n) servername="$OPTARG" ;;
		p) serverport="$OPTARG" ;;
		r) docroot="$OPTARG" ;;
	esac
done

# --- Library functions.
rel2abs()
{
	# Convert a relative path into an absolute one. Do NOT use readlink
	# because that would break support for symbolic links which point
	# outside the document root. Instead, temporarily change into the
	# directory, then print the current directory. This way, the kernel
	# resolves relativ paths.

	[[ -d "$1" ]] && { (cd -- "$1"; echo "$PWD"); return; }
	[[ -f "$1" ]] && { (cd -- "${1%/*}"; echo "$PWD/${1##*/}"); return; }
}

parseIndex()
{
	# Parse an index file. The syntax is similar to the one of geomyidae
	# (another gopher server). Lines beginning with a bracket denote a
	# menu item, all other lines are informational text.
	#
	# Substitute "server" and "port" with the server's settings. Also
	# turn relative paths into absolute ones: Paths that do not begin
	# with a "/" are relative to $rel. However, if it begins with "!",
	# remove that "!" and leave the path as is.
	#
	# Read from STDIN if $@ is empty.

	rel=$1
	shift

	sed \
		-e '/^\[/! { s/.*/i&\t-\t-\t0/ }' \
		-e '/^\[/ { s/\(.*\)|server|\([^|]\+\)]/\1|'"$servername"'|\2]/ }' \
		-e '/^\[/ { s/\(.*\)|\([^|]\+\)|port]/\1|\2|'"$serverport"']/ }' \
		-e '/^\[/ { s,^\(...[^|]\+|\)\([^/!]\),\1'"$rel"'/\2, }' \
		-e '/^\[/ { s,^\(...[^|]\+|\)!\([^|]\+\),\1\2, }' \
		-e '/^\[/ { s/\[//; s/^\(.\)|/\1/; s/\]//; s/|/\t/g }' \
		-e 's/$/\r/' \
		"$@"
}

isScript()
{
	# Any executable file "$1" with a name ending in ".$2" is meant to
	# be a script.

	[[ -x "$1" ]] && [[ "${1##*.}" == "$2" ]]
}

sendListing()
{
	if [[ -f "$1"/.HEADER ]]; then
		parseIndex "${1:${#docroot}}" "$1"/.HEADER
		printf 'i\t-\t-\t0\r\n'
	fi

	# Auto-create a menu, try to guess file types.
	for i in "$1"/*; do
		# Skip non-existing files, including empty directories (in this
		# case, "$1"/* will expand to "$1"/* which does not exist).
		[[ -e "$i" ]] || continue

		if [[ -d "$i" ]]; then
			itype=1
		else
			# The default type for files is 0, that is plain text. If
			# any of the following conditions matches, then $itype will
			# get overwritten.
			itype=0
			if isScript "$i" "dcgi"; then
				# As DCGI files are always piped into parseIndex(), they
				# must be menus. However, if their name begins with
				# "query_", then this script can receive search queries.
				itype=1
				bname=${i##*/}
				bname=${bname,,}
				if [[ "${bname:0:6}" == "query_" ]]; then
					itype=7
				fi
			else
				# Try to deduce file types from file name extensions.
				ext=${i##*.}
				if [[ -n "$ext" ]]; then
					case "${ext,,}" in
						html|htm|xhtm|xhtml) itype=h ;;
						jpeg|jpg|png|tif|tiff|bmp|svg) itype=I ;;
						gz|xz|tar|tgz|zip|bz|bz2) itype=5 ;;
						exe|bin|iso|img|pdf|ps) itype=9 ;;
						mp3|ogg|wav|aif|aiff|aifc|snd) itype=s ;;
						gif) itype=g ;;
					esac
				fi
			fi
		fi

		# Print this menu item, show the base name of $i.
		printf "%s%s\t%s\t%s\t%d\r\n" \
			$itype \
			"${i##*/}" \
			"${i:${#docroot}}" \
			"$servername" \
			"$serverport"
	done
}

run()
(
	# Run a script. The working directory will be the script's location.
	# Note the parentheses around this function: They'll start a
	# subshell (and break syntax highlighting of Vim).
	cd -- "${1%/*}"
	"$@"
)

# --- Process a request.
# Read a line from STDIN. First, remove any CRs and extract selector and
# search query (if any). Discard anything after a second TAB.
read -r request
request=${request//$'\r'/}
selector=${request%%$'\t'*}
search=${request:${#selector}+1}
search=${search%%$'\t'*}

# Prefix the selector with the path of the document root. Then convert
# this path into an absolute one. If the result is still a path below
# $docroot, then it's okay to proceed. Hence, this routine makes it
# impossible to request something like "/..".
absreq=$(rel2abs "$docroot$selector")
if [[ "${absreq:0:${#docroot}}" == "$docroot" ]]; then
	# In directories, try to find a file called .INDEX which may be a
	# manually created menu. An .INDEX.dcgi script may be used to
	# dynamically create a menu. Otherwise, we'll simply show the
	# directories contents.
	if [[ -d "$absreq" ]]; then
		if [[ -f "$absreq"/.INDEX ]]; then
			rtype="INDEX"
			parseIndex "${absreq:${#docroot}}" "$absreq"/.INDEX
		elif [[ -x "$absreq"/.INDEX.dcgi ]]; then
			rtype="INDEX.dcgi"
			run "$absreq"/.INDEX.dcgi | parseIndex "${absreq:${#docroot}}"
		else
			rtype="AUTOINDEX"
			sendListing "$absreq"
		fi
	elif isScript "$absreq" "cgi"; then
		rtype="CGI"
		echo "$search" | run "$absreq"
	elif isScript "$absreq" "dcgi"; then
		# If a DCGI script outputs a relative path, then this path is
		# meant to be relative to the scripts location.
		rtype="DCGI"
		rel="${absreq:${#docroot}}"
		rel="${rel%/*}"
		echo "$search" | run "$absreq" | parseIndex "$rel"
	else
		rtype="FILE"
		# This is a regular file. Just show it.
		cat "$absreq"
	fi

	# Send informational message to syslog. This expects (x)inetd to
	# fill the variable $REMOTE_HOST.
	logger -it sgopherd -p daemon.info "'$REMOTE_HOST' '$rtype' '$request'"
else
	# Log error condition and reply to client.
	logger -it sgopherd -p daemon.error "'$REMOTE_HOST' 'INVALID' '$request'"
	printf "%d%s\t%s\t%s\t%d\r\n" \
		3 "\`$request' invalid." "Error" "Error" 0
fi
